using System.Collections.Generic;
using System.Threading.Tasks;

namespace RemoteLea.Core;

/// <summary>
/// Defines a parameter that can be given to an operation
/// </summary>
public record OperationParameter(string Name, string Description);

/// <summary>
/// Defines a value that is created by an operation and can be placed in a variable for
/// later reference.
/// </summary>
public record OperationOutput(string Name, string Description);

/// <summary>
/// Defines a specific operation that's been implemented
/// </summary>
/// <param name="OpCode">String that uniquely identifies a single operation</param>
/// <param name="Parameters">Named parameters for each operation</param>
/// <param name="Outputs">Named outputs that are saved</param>
public record OperationDefinition(string OpCode, IReadOnlyList<string> Parameters, IReadOnlyList<string> Outputs);

/// <summary>
/// Contains execution logic for performing a type of operation. Each implementation
/// is intended to be stateless and called each time the instruction's opcode is encountered.
/// </summary>
public interface IOperation
{
    /// <summary>
    /// Retrieves the definition for this instruction
    /// </summary>
    OperationDefinition Definition { get; }

    /// <summary>
    /// Executes the operation with the specified arguments
    /// </summary>
    /// <param name="arguments">The parameter names and supplied argument values</param>
    /// <param name="variables">The current state of all execution variables</param>
    /// <param name="outputs">The name and values for all outputs generated by this operation execution</param>
    /// <returns>
    /// The label of the next instruction to execute. If `null` then the next instruction in the instruction set
    /// will be executed.
    /// </returns>
    Task<string?> ExecuteAsync(IReadOnlyDictionary<string, string> arguments,
        IReadOnlyDictionary<string, object> variables,
        Dictionary<string, object> outputs);
}